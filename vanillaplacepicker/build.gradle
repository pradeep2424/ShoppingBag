apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.Mindinventory'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 9
        versionName "0.0.9"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.50'
    implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    implementation 'androidx.core:core-ktx:1.2.0-alpha03'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    testImplementation 'junit:junit:4.12'

    // Location
    api 'com.google.android.gms:play-services-location:17.0.0'
    api 'com.google.android.gms:play-services-maps:17.0.0'

    // this library are used for Retrofit API calling feature
    implementation 'io.reactivex.rxjava2:rxjava:2.2.4'

    // Google material
    implementation 'com.google.android.material:material:1.0.0'

    implementation "com.google.android.libraries.places:places:2.0.0"
}
repositories {
    mavenCentral()
}

// Gradle task to check Google API key availability in AndroidManifest of root project
task validateManifest() {

    def xmlSource = file("${rootDir}/app/src/main/AndroidManifest.xml")
    def xmlParser = new XmlParser()
    def xmlRoot = xmlParser.parse(xmlSource)
    def metaDataNode = xmlRoot.application.'meta-data'
    def isAPIKeyAvailable = false
    metaDataNode.any { metadata ->

        metadata.attributes().any {

            if (it.value == "com.google.android.geo.API_KEY") {
                isAPIKeyAvailable = true
                return true
            } else isAPIKeyAvailable = false
        }

        if (isAPIKeyAvailable)
            return true
    }

    if (!isAPIKeyAvailable)
        throw new RuntimeException("Couldn\'t get Google API key from application meta data. Was it set in your AndroidManifest.xml?")
}
